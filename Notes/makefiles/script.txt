  } else {
    // pull off the node at head of the list
    bagnode_t *node = bag->head;
    void *item = bag->head->item;
    bag->head = node->next;
    free(node);
    return item;
  }
}


/* *************************************************
 * bag_print: print a bag, calling the func on each item.
 */
void bag_print(bag_t *bag, void (*printfunc)(void *item)) 
{
  if (bag == NULL) {
    return;
  } else {
    printf("{");
    for (bagnode_t *node = bag->head; node != NULL; node = node->next) {
      if (printfunc != NULL)
	(*printfunc)(node->item);
      printf(", ");
    }
    printf("}");
  }
}

[cs50@flume ~/demo]$ clear

[cs50@flume ~/demo]$ more names.c
/* 
 * names9.c - read in a list of names from stdin
 *  (derived from names5.c, to use a 'bag' to store names)
 *
 * usage: names < infile
 * stdin: list of names, one per line
 * stdout: list of names, one per line
 * 
 * David Kotz, April 2016, 2017
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "readlinep.h"

/* the items in a bag */
typedef struct bagnode {
  void *item;
  struct bagnode *next;
} bagnode_t;

bagnode_t *bagnode_new(void *item);

/* the bag as a whole */
typedef struct bag {
  bagnode_t *head;
} bag_t;

bag_t * bag_new(void);
bool bag_insert(bag_t *bag, void *item);
void *bag_extract(bag_t *bag);
void bag_print(bag_t *bag, void (*printfunc)(void *item));
[cs50@flume ~/demo]$ 
[cs50@flume ~/demo]$ 
[cs50@flume ~/demo]$ 
[cs50@flume ~/demo]$ mygcc names.c readlinep.c -o names
[cs50@flume ~/demo]$ mygcc names.c  -o names
/tmp/cc8D2JHC.o: In function `readlinep':
/net/class/cs50/demo/readlinep.h:22: undefined reference to `freadlinep'
collect2: error: ld returned 1 exit status
[cs50@flume ~/demo]$ mygcc names.c readlinep.h readlinep.c -o names
[cs50@flume ~/demo]$ emacs Makefile
[cs50@flume ~/demo]$ cat Makefile 

names: names.c readlinep.c readlinep.h
	gcc names.c readlinep.c -o names

[cs50@flume ~/demo]$ make
make: 'names' is up to date.
[cs50@flume ~/demo]$ rm names
rm: remove regular file 'names'? y
[cs50@flume ~/demo]$ make
gcc names.c readlinep.c -o names
[cs50@flume ~/demo]$ touch names.c
[cs50@flume ~/demo]$ make
gcc names.c readlinep.c -o names
[cs50@flume ~/demo]$ make
make: 'names' is up to date.
[cs50@flume ~/demo]$ fg
-bash: fg: current: no such job
[cs50@flume ~/demo]$ emacs names.c

[1]+  Stopped                 emacs names.c
[cs50@flume ~/demo]$ rm names
rm: remove regular file 'names'? y
[cs50@flume ~/demo]$ fg
emacs names.c

[1]+  Stopped                 emacs names.c
[cs50@flume ~/demo]$ alias mygcc
alias mygcc='gcc -Wall -pedantic -std=c11 -ggdb'
[cs50@flume ~/demo]$ fg
emacs names.c
[cs50@flume ~/demo]$ cat Makefile 
CC=gcc
CFLAGS=-Wall -pedantic -std=c11 -ggdb

names: names.o bag.o readlinep.o 
	gcc names.o bag.o readlinep.o -o names

names.o: bag.h readlinep.h
bag.o: bag.h
readlinep.o: readlinep.h

clean:
	rm -f names
	rm -f *.o
	rm -f *~
[cs50@flume ~/demo]$ cat names.c
/* 
 * names9.c - read in a list of names from stdin
 *  (derived from names5.c, to use a 'bag' to store names)
 *
 * usage: names < infile
 * stdin: list of names, one per line
 * stdout: list of names, one per line
 * 
 * David Kotz, April 2016, 2017
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "readlinep.h"
#include "bag.h"

void printname(void* item) { char *name=item;  printf("%s", name); }

/* ********************************************************* */
int main()
{
  int n = 0;			       // number of names read
  char *name;

  bag_t *bag = bag_new();
  if (bag == NULL)
    exit(1);

  // read the list of names - any number of names!
  while (!feof(stdin)) {
    name = readlinep();
    if (name != NULL) {
      if (bag_insert(bag, name)) {
	n++; // only increment if no error
      }
    }
  }
  
  printf("%d names:\n", n);
  // print the list of names
  //  while ( (name = bag_extract(bag)) != NULL)
  //    printf("%s\n", name);

  bag_print(bag, printname);
  putchar('\n');

  // here we are lazy and do not free the bag. 

  return 0;
}
[cs50@flume ~/demo]$ cat bag.h
/* the items in a bag */
typedef struct bagnode {
  void *item;
  struct bagnode *next;
} bagnode_t;

bagnode_t *bagnode_new(void *item);

/* the bag as a whole */
typedef struct bag {
  bagnode_t *head;
} bag_t;

bag_t * bag_new(void);
bool bag_insert(bag_t *bag, void *item);
void *bag_extract(bag_t *bag);
void bag_print(bag_t *bag, void (*printfunc)(void *item));
[cs50@flume ~/demo]$ cat bag.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "bag.h"

/* *************************************************
 * bag_new: create a new bag.
 * Return a pointer if success, NULL if failure.
 */
bag_t * 
bag_new(void)
{
  bag_t *bag = malloc(sizeof(bag_t));

  if (bag != NULL) {
    bag->head = NULL;
  }
  return bag;
}


/* *************************************************
 * bag_insert: insert the given name into the bag.
 * Return true if success, false if failure.
 */
bool bag_insert(bag_t *bag, void *item) 
{
  bagnode_t *node = bagnode_new(item);

  if (bag == NULL || node == NULL) {
    return false;
  } else {
    // insert the new node at head of the list
    node->next = bag->head;
    bag->head = node;
  }
  return true;
}


/* *************************************************
 * bagnode_new: create a new node to store the given name.
 * Returns pointer to new node, if successful, else returns NULL.  
 * The pointer 'name' is assumed to be malloc storage, and is not copied.
 * Caller is responsibe for later deleting 'name'.
 */
bagnode_t *bagnode_new(void *item) 
{
  // allocate memory for the new node
  bagnode_t *node = malloc(sizeof(bagnode_t));
  
  if (node == NULL) {
    return NULL;
  } else {
    // initialize node contents
    node->next = NULL;
    node->item = item;
  }

  return node;
}

/* *************************************************
 * bag_extract: extract an item (any item) from the bag.
 * Return NULL if bag is empty or if some failure.
 */
void *bag_extract(bag_t *bag) 
{
  if (bag == NULL) {
    return NULL;
  } else if (bag->head == NULL) {
    return NULL;
  } else {
    // pull off the node at head of the list
    bagnode_t *node = bag->head;
    void *item = bag->head->item;
    bag->head = node->next;
    free(node);
    return item;
  }
}


/* *************************************************
 * bag_print: print a bag, calling the func on each item.
 */
void bag_print(bag_t *bag, void (*printfunc)(void *item)) 
{
  if (bag == NULL) {
    return;
  } else {
    printf("{");
    for (bagnode_t *node = bag->head; node != NULL; node = node->next) {
      if (printfunc != NULL)
	(*printfunc)(node->item);
      printf(", ");
    }
    printf("}");
  }
}

[cs50@flume ~/demo]$ ./names
erin
mary
sally
3 names:
{sally, mary, erin, }
[cs50@flume ~/demo]$ ./names < names.txt 
70 names:
{Michael, Michelle, Edward, Yi, Linda, Peter, Nicholas, Sara, Wesley, Neerja, Paolo, Morgan, Ellen, Samuel, Tanya, Jay, Naren, Magdalene, Emily, Alexander, Michael, Marshall, Noah, Moyosore, Teddy, Arista, Himadri, Breonna, Jasmine, Ally, Robert, Scott, Robert, Savannah, Stephen, Caitlyn, Annika, Daniel, Emma, Wendy, Liam, Vivian, Steven, Clifton, Jennifer, Laya, Gregory, Kevin, Kazuma, Danah, Ryan, Joshua, Alexander, Isaac, Shoshana, Kathryn, Afnan, Anna, Anthony, Christopher, Alexander, Robert, Trevor, Shaket, Alex, Ryan, James, Anders, Alexander, Michael, }
[cs50@flume ~/demo]$ emacs bag.h

[1]+  Stopped                 emacs bag.h
[cs50@flume ~/demo]$ ./names < names.txt 
70 names:
{Michael, Michelle, Edward, Yi, Linda, Peter, Nicholas, Sara, Wesley, Neerja, Paolo, Morgan, Ellen, Samuel, Tanya, Jay, Naren, Magdalene, Emily, Alexander, Michael, Marshall, Noah, Moyosore, Teddy, Arista, Himadri, Breonna, Jasmine, Ally, Robert, Scott, Robert, Savannah, Stephen, Caitlyn, Annika, Daniel, Emma, Wendy, Liam, Vivian, Steven, Clifton, Jennifer, Laya, Gregory, Kevin, Kazuma, Danah, Ryan, Joshua, Alexander, Isaac, Shoshana, Kathryn, Afnan, Anna, Anthony, Christopher, Alexander, Robert, Trevor, Shaket, Alex, Ryan, James, Anders, Alexander, Michael, }
[cs50@flume ~/demo]$ fg
emacs bag.h
[cs50@flume ~/demo]$ make clean
rm -f names
rm -f *.o
rm -f *~
[cs50@flume ~/demo]$ f
-bash: f: command not found
[cs50@flume ~/demo]$ emacs Makefile 
[cs50@flume ~/demo]$ 
